/**
 * Copyright 2022 Urmich Mikhail
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.3'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.21'
        classpath "com.google.android.libraries.mapsplatform.secrets-gradle-plugin:secrets-gradle-plugin:2.0.1"
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.5.0'
        classpath 'com.hiya:jacoco-android:0.2'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

ext.projectArtifactId = { project ->
    if (project.name == 'placesearch-ktx') {
        return project.name
    } else {
        return null
    }
}

/**
 * Shared configs across subprojects
 */
allprojects {
    group = 'com.urmich.android'
    version = '1.1.0'
    project.ext.artifactId = rootProject.ext.projectArtifactId(project)
}

/**
 * Publishing and signing info
 */
subprojects { project ->
    if (project.ext.artifactId == null) return

    apply plugin: 'com.android.library'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'com.hiya.jacoco-android'
    apply plugin: 'signing'

    // Code coverage
    jacoco {
        toolVersion = "0.8.7"
    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.source
        archiveClassifier = "sources"
    }

    task javadocJar(type: Jar) {
        dependsOn(tasks.named("dokkaHtml"))
        dependsOn(tasks.named("dokkaJavadoc"))
        archiveClassifier.set("javadoc")
        from new File(buildDir, "dokka/javadoc")
    }

    publishing {
        publications {
            aar(MavenPublication) {
                groupId project.group
                artifactId project.ext.artifactId
                version project.version


                pom {
                    name = project.name
                    description = "Place Search Kotlin extensions (KTX) for Places SDK for Android"
                    url = "https://github.com/urmichm/places-placesearch-ktx"
                    scm {
                        connection = 'scm:git@github.com:urmichm/places-placesearch-ktx.git'
                        developerConnection = 'scm:git@github.com:urmichm/places-placesearch-ktx.git'
                        url = 'https://github.com/urmichm/places-placesearch-ktx'
                    }

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }

                    organization {
                        name = 'Urmich M.'
                        url = 'https://android.urmich.com/'
                    }

                    developers {
                        developer {
                            name = 'Urmich M.'
                            email = 'urmich.m@gmail.com'
                        }
                    }
                }

                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    project.configurations.api.allDependencies.each { dependency ->
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                    }
                }

                afterEvaluate {
                    artifact "$buildDir/outputs/aar/$project.name-release.aar"
                    artifact javadocJar
                    artifact sourcesJar
                }
            }
        }

        repositories {
            maven {
                name = "mavencentral"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.aar
    }
}



task clean(type: Delete) {
    delete rootProject.buildDir
}
